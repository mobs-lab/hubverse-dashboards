---
# This is an example configuration file for customizing what want to see/use on the Dashboard based on your data.
# Please copy this file into a `config.yaml` inside project root folder before running the setup bash shell script!!

#=============
# Data Source
#=============
# Links/paths to HubVerse data (See README.md)
# - links_to_hubverse_compatible_data:
#     - target_data_link: "https://github.com/FluSight-forecast-hub/"
#     - model_output_link: "https://github.com/hubverse-org/hubTemplate" # Will look for `/model-output` folder in this path
# To use local only setup, comment out the line above & uncomment the line below.
- link_to_hubverse_compatible_data: null

#==============================
# Forecast Periods Definitions
#==============================
# Display names and start/end boundaries for forecast periods.
# Forecast periods can overlap each other or have gap between them.
# Each period' start and end date will be used to filter out matching model-output data.
- forecast_periods:
    # Example of a static (no more data update) forecast_period
    - season-2021-2022: # Name each forecast_period entry however you like. The `id` below will be used for identifying the forecast period.
        - forecast_period_id: "season-2023-2024" # Required, must be unique.

        # All datetime values must be ISO Datetime String or ISO Date String
        - start_date: "2023-08-01T00:00:00" # Required
        - end_date: "2024-07-31T00:00:00" # Required for static forecast_period
        - display_string: "Season 2023-2024 Flu-Forecast" # Required, will be used for displaying
        - is_default_selected: True # Optional. Only one forecast_period can have "True". If not provided, default to the one with most recent `start_date`.

    # Example of a dynamic (data updates ongoing) forecast_period
    - dynamic-forecast-period-2025-2026:
        - forecast_period_id: "season-2025-2026"
        # start_date and end_date are both required. Both must be ISO datetime string or "null".
        # Whenever `end_date` is beyond the actual current UTC date, this period is dynamic.
        # When both are "null",
        - start_date: "2025-08-01T00:00:00"
        - end_date: "2026-07-31T00:00:00"
        - display_string: "(Ongoing) COVID-19 Forecast 2025-2026"

# Special forecast_periods are used to automatically aggregate data that are within a certain date range,
# Each special period should have a time-anchor (as base of relative time length calculation).
# Only dynamic forecast_periods can be time-anchor. When a dynamic forecast_period becomes static,
- special_forecast_periods:
    - last-2-weeks:
        - special_period_id: "last-2-weeks" # Required, used for indexing and keying
        - display_string: "Last 2 Weeks" # Required
        # Configure how aggregation works for special forecast period.
        - time_anchor:
            # Specify a dynamic forecast_period's ID.
            - anchor_on: "season-2025-2026"
            # Two Options: "target-data" & "model-output".
            # Respectively, Base date of calculation will either be most-recent-date in target-data or model-output (using reference_date).
            - anchor_mode: "model-output"
            # Input a negative number here, unit is `time_unit` you defined
            # For example this one is -1 (going backwards in time) * 2 * `7` (days) = -14 (days)
            - range_calculation: -2

#=========================
#     Location Data
#=========================
# Special toggle for single-location modelling task.
# When False, the dashboard will automatically detect all locations from your target-data and model-output files.
- is_single_location_forecast: False

# If True, specify the location code here so map visualizations can work properly.
# Please input a U.S. State FIPS code (e.g., "01" for Alabama, "06" for California).
# This field is REQUIRED when is_single_location_forecast is True.
- single_location_mapping: "02" # Example: Alaska

#=========================================
# Modelling Tasks, or Targets definitions
#=========================================
# Special toggle for single-target forecast scenario.
# Change this to True and dashboard will not filter target-data's "value" column nor model-output's "target" column at all.
- is_single_forecast_target: False

# TODO: How are we going to support multiple targets? I can foresee having multiple X-axis each corresponding to a target in i.e. Forecast Chart.
#       (Also, to implement this, change the script to collect and organize each narrow-format target-data rows according to different targets)
#
# Defining the actual logic of how to utilize target-data and model-output together to see model performances.
# Targets to include, paired with display names.
# Dashboard will look for each target in column headers in target-data.
- targets:
    - "value": # admission values in Flusight-Forecast-hub's hospitalization target-data.
        # Dashboard will find `wk inc flu hosp` for "target" column, and use the values of respective rows
        - corresponding_key_in_model_output_target_column: "wk inc flu hosp"
        # Which seasons to do this modelling task for,
        # Use the `forecast_period_id` value you defined in the beginning of this configuration file!
        # If this option is `null` or deleted, defaults to all seasons.
        - for_forecast_periods: ["season-2023-2024", "season-2025-2026", "last-2-weeks"]
    - "Ice Cream":
        - corresponding_key_in_model_output_target_column: "Supercalifraglisticexpialidocious" # Make sure the string match EXACTLY!
        - for_forecast_periods: ["season-2025-2026"]
  # - "observations":
  #   - corresponding_key_in_model_output_target_column: "something something"
  #   - for_forecast_periods: ["season-2021-2022" ]
  # - "admission_type": ...

# Time Unit in days, or how frequent model-output and target-data are updated.
# This is also used to cross-reference with `horizon` (forecast horizons).
# Each predictin target Day Y should be equal to some Day X + `horizon` * `time_unit`.
- time_unit: 7 # Required

#====================================
# Target-data related configurations
#====================================
# Here you can customize the settings to work with your specific target-data data.
# See https://docs.hubverse.io/en/latest/user-guide/target-data.html for Hubverse's documentation on target-data
#
# You can either use a single CSV file or parquet files.
# Please see the https://docs.hubverse.io/en/latest/user-guide/target-data.html#file-formats
# to properly structure your files.
# If "parquet" option is specified,

- target_data_file_format: "csv" # Or "parquet"

# Some further conditions must be met for dashboard to work with your target-data:
# - Your target-data contain:
#   - A "date" column that contain date in string format.
#   - A "observation" column or equivalent.
#
# - If you have multiple locations or multiple targets:
#   - A "location" column
#   - A "target" column
#   * If single-location or single-target are toggled on, these two can be left blank.
#
# - If you are using single CSV target-data file AND need to view historical target-data: (See https://docs.hubverse.io/en/latest/user-guide/target-data.html#optional-as-of-column-to-record-data-versions)
#   - An "as_of" column that contain date in string format.
- target_data_header_mapping:
    - date_col_name: "date"
    - observation_col_name: "value"
    - location_col_name: "location"
    - location_name_col_name: "location_name" # Optional
    - target_col_name: null
    - as_of_col_name: null # Optional, will be ignored when "parquet" is target data file format (folder name will be used)

- target_data_observation_format: "float"

#=====================================
# Model-output related configurations
#=====================================
# Models to include. The dashboard uses this list to find matching subdirectories inside `model-output/`
# So please name the folders to be the exact same. Recommended to wrap names inside double quote.
- available_models:
    - "MOBS-GLEAM_FLUH": # This name has to match the subdirectory
        - color_hex: "#9ceb94" # Optional, Assign color here for dashboard to display it whenever applicable.
    - "MIGHTE-Nsemble":
        - color_hex: "#111111"
    - "NON-EXISTENT-MODEL":
        - color_hex: "#000000"
    # - "MIGHTE-Joint":
    #     - color_hex: "#3fc49e"
    # - "NU_UCSD-GLEAM_AI_FLUH":
    #     - color_hex: "#45cded"
    # - "CEPH-Rtrend_fluH":
    #     - color_hex: "#0292d1"
    # - "NEU_ISI-FluBcast":
    #     - color_hex: "#7bb1ff"
    # - "NEU_ISI-AdaptiveEnsemble":
    #     - color_hex: "#5f5fd6"
    # - "FluSight-ensemble":
    #     - color_hex: "#d36f54"

#
# Here you can customize the settings to work with your specific model-output data.
#
# Specify your model-output data's naming standard, either using ISO date `round_id` or alphanumeric `round_id`.
# For examples, see https://docs.hubverse.io/en/latest/user-guide/model-output.html#directory-structure
- model_output_data_file_naming_standard: "ISODate" # Or "Alphanumeric"

# See https://docs.hubverse.io/en/latest/user-guide/model-output.html#details-about-model-output-column-specifications.
# Some conditions must be met for this to work,
# Mostly related to your model-output data representation format, for the purpose of matching `date` column in target-data.
# CONDITIONS:
# - Your model-output data contain:
#   - A "reference_date" column or equivalent
#   - A "target_end_date" column or equivalent
#   - A "target" column or equivalent
#   - A "horizon" column, if you specify `horizons` options, see below
#   - A "location" column or equivalent, if you have multiple location
#   - A "output_type" column that has `quantile` as key. Currently the dashboard only supports quantile output type forecasts.
#   - A "output_type_id" column that has quantile interval values in float values.
#   - A "value" column that contain the model output predictions
# Map your data's column header below
- model_output_data_header_mapping:
    - reference_date_col_name: "reference_date"
    - target_end_date_col_name: "target_end_date"
    - target_col_name: "target"
    - horizon_col_name: "horizon"
    - location_col_name: "location"
    - output_type_col_name: "output_type"
    - output_type_id_col_name: "output_type_id"
    - value_col_name: "value"

# Prediction intervals to make available in the Forecast chart.
# Hubverse's model-output column specs: https://docs.hubverse.io/en/latest/user-guide/model-output.html#details-about-model-output-column-specifications
# Dashboard will use your specifications for acquiring and calculating CIs accordingly.
- prediction_intervals:
    - "25": # Dashboard will postfix this with a "%" and display as selectable options.
        - uses_output_type_ids: ["0.1", "0.35"] # Specify the output_type_ids keys, order has to be ascending-by-value.
    - "50":
        - uses_output_type_ids: ["0.25", "0.75"]

# Required: The difference between the target_date and the origin_date in time units specified by the hub (e.g., days, weeks, or months)
- horizons: [0, 1, 2, 3, 4, 5, 6, 7]

#===================================
# Model Output Evaluation Settings
#===================================
# TODO: What kind of representation should we provide configuration on?
# Prediction intervals to calculate coverage evaluations on.
- evaluations_prediction_intervals:
    - "25": # Dashboard will postfix this with a "%" and display as selectable options.
        - uses_output_type_ids: ["0.1", "0.35"] # Specify the output_type_ids keys, order has to be ascending-by-value.
    - "50":
        - uses_output_type_ids: ["0.25", "0.75"]

# REQUIRED: Model to use as a baseline for relative WIS calculations.
# This must be one of the models listed in available_models above.
# The baseline model will be used to calculate relative WIS scores for all other models.
- baseline_model_for_relative_WIS: "MOBS-GLEAM_FLUH"
